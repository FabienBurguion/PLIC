{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/": {
            "get": {
                "description": "Returns the current server time. If the user is not authenticated, returns a fixed default time.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "testing"
                ],
                "summary": "Get current server time",
                "responses": {
                    "200": {
                        "description": "Current time in RFC3339 format",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/change-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows a connected user to change their password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Change password for authenticated user",
                "parameters": [
                    {
                        "description": "New password payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully"
                    },
                    "400": {
                        "description": "Bad request (invalid JSON)",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (not connected or user not found)",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/email": {
            "post": {
                "description": "Sends a test email to the specified address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "mail"
                ],
                "summary": "Send test email",
                "parameters": [
                    {
                        "description": "Email request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MailerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid email address or bad request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/forget-password": {
            "post": {
                "description": "Generate a new password and send it via email to the user if the account exists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Request password reset",
                "parameters": [
                    {
                        "description": "Email of the user",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MailerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success even if user does not exist (for security)"
                    },
                    "400": {
                        "description": "Bad request (invalid JSON or email format)",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/hello_world": {
            "get": {
                "description": "Returns a greeting with the provided name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "testing"
                ],
                "summary": "Say Hello",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name to greet",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.HelloWorldResponse"
                        }
                    }
                }
            }
        },
        "/image": {
            "get": {
                "description": "Retrieves a pre-signed URL to access an image stored in S3",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "upload"
                ],
                "summary": "Get image URL from S3",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.ImageUrl"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Uploads an image file to an S3 bucket",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "upload"
                ],
                "summary": "Upload an image to S3",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Image file to upload",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad request or file not found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate a user with username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/match": {
            "post": {
                "description": "Enregistre un nouveau match en base de données à partir des données fournies en JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Crée un nouveau match",
                "parameters": [
                    {
                        "description": "Objet match à créer",
                        "name": "match",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MatchRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Match créé avec succès",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Données invalides ou champ ID manquant",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Erreur lors de la création du match",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/match/all": {
            "get": {
                "description": "Retourne la liste complète de tous les matchs stockés en base",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Liste tous les matchs",
                "responses": {
                    "200": {
                        "description": "Liste des matchs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.MatchResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Erreur serveur lors de la récupération des matchs",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/match/{id}": {
            "get": {
                "description": "Retourne les informations d’un match en fonction de son identifiant passé en paramètre de requête",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Récupère un match par son ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Identifiant du match",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Match trouvé",
                        "schema": {
                            "$ref": "#/definitions/models.MatchResponse"
                        }
                    },
                    "400": {
                        "description": "ID manquant ou invalide",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Match non trouvé",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Erreur serveur ou base de données",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/place": {
            "post": {
                "description": "Appelle l'API Google Places pour synchroniser les terrains autour d'une position donnée (Paris en dur pour l'instant)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "google"
                ],
                "summary": "Synchronise les terrains depuis l'API Google Places",
                "responses": {
                    "201": {
                        "description": "Synchro réussie"
                    },
                    "500": {
                        "description": "Erreur lors de la synchronisation",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/profile_picture/{id}": {
            "post": {
                "description": "Uploads a profile picture to an S3 bucket",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "upload"
                ],
                "summary": "Upload a profile picture to S3",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Image file to upload",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad request or file not found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register a user with username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve user information, including profile picture and preferences",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Missing ID in URL params",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Patch a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Patch a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Missing ID in URL params",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "403": {
                        "description": "Incorrect rights",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ChangePasswordRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                }
            }
        },
        "models.Error": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.EtatMatch": {
            "type": "string",
            "enum": [
                "Termine",
                "Manque Score",
                "En cours",
                "Valide",
                "Manque joueur"
            ],
            "x-enum-varnames": [
                "Termine",
                "ManqueScore",
                "EnCours",
                "Valide",
                "ManqueJoueur"
            ]
        },
        "models.Field": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "ranking": {
                    "type": "integer"
                },
                "score": {
                    "type": "integer"
                }
            }
        },
        "models.HelloWorldResponse": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "string"
                }
            }
        },
        "models.ImageUrl": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                }
            }
        },
        "models.LoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "models.MailerRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "models.MatchRequest": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "lieu": {
                    "type": "string"
                },
                "sport": {
                    "$ref": "#/definitions/models.Sport"
                }
            }
        },
        "models.MatchResponse": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "etat": {
                    "$ref": "#/definitions/models.EtatMatch"
                },
                "id": {
                    "type": "string"
                },
                "lieu": {
                    "type": "string"
                },
                "nbre_participant": {
                    "type": "integer"
                },
                "score1": {
                    "type": "integer"
                },
                "score2": {
                    "type": "integer"
                },
                "sport": {
                    "$ref": "#/definitions/models.Sport"
                }
            }
        },
        "models.RegisterRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.Sport": {
            "type": "string",
            "enum": [
                "basket",
                "foot"
            ],
            "x-enum-varnames": [
                "Basket",
                "Foot"
            ]
        },
        "models.UserResponse": {
            "type": "object",
            "properties": {
                "bio": {
                    "description": "@nullable",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "favoriteCity": {
                    "description": "@nullable",
                    "type": "string"
                },
                "favoriteField": {
                    "description": "@nullable",
                    "type": "string"
                },
                "favoriteSport": {
                    "description": "@nullable",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Sport"
                        }
                    ]
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Field"
                    }
                },
                "profilePicture": {
                    "description": "@nullable",
                    "type": "string"
                },
                "sports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Sport"
                    }
                },
                "username": {
                    "type": "string"
                },
                "visitedFields": {
                    "type": "integer"
                },
                "winrate": {
                    "description": "@nullable",
                    "type": "integer"
                }
            }
        }
    }
}