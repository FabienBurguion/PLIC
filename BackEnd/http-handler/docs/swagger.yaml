definitions:
  models.ChangePasswordRequest:
    properties:
      password:
        type: string
    type: object
  models.Error:
    properties:
      message:
        type: string
    type: object
  models.EtatMatch:
    enum:
    - Termine
    - Manque Score
    - En cours
    - Valide
    - Manque joueur
    type: string
    x-enum-varnames:
    - Termine
    - ManqueScore
    - EnCours
    - Valide
    - ManqueJoueur
  models.Field:
    properties:
      name:
        type: string
      ranking:
        type: integer
      score:
        type: integer
    type: object
  models.HelloWorldResponse:
    properties:
      response:
        type: string
    type: object
  models.ImageUrl:
    properties:
      url:
        type: string
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
    type: object
  models.MailerRequest:
    properties:
      email:
        type: string
    type: object
  models.MatchRequest:
    properties:
      date:
        type: string
      lieu:
        type: string
      sport:
        $ref: '#/definitions/models.Sport'
    type: object
  models.MatchResponse:
    properties:
      date:
        type: string
      etat:
        $ref: '#/definitions/models.EtatMatch'
      id:
        type: string
      lieu:
        type: string
      nbre_participant:
        type: integer
      score1:
        type: integer
      score2:
        type: integer
      sport:
        $ref: '#/definitions/models.Sport'
    type: object
  models.RegisterRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.Sport:
    enum:
    - basket
    - foot
    type: string
    x-enum-varnames:
    - Basket
    - Foot
  models.UserResponse:
    properties:
      bio:
        description: '@nullable'
        type: string
      createdAt:
        type: string
      favoriteCity:
        description: '@nullable'
        type: string
      favoriteField:
        description: '@nullable'
        type: string
      favoriteSport:
        allOf:
        - $ref: '#/definitions/models.Sport'
        description: '@nullable'
      fields:
        items:
          $ref: '#/definitions/models.Field'
        type: array
      profilePicture:
        description: '@nullable'
        type: string
      sports:
        items:
          $ref: '#/definitions/models.Sport'
        type: array
      username:
        type: string
      visitedFields:
        type: integer
      winrate:
        description: '@nullable'
        type: integer
    type: object
info:
  contact: {}
paths:
  /:
    get:
      description: Returns the current server time. If the user is not authenticated,
        returns a fixed default time.
      produces:
      - application/json
      responses:
        "200":
          description: Current time in RFC3339 format
          schema:
            type: string
      summary: Get current server time
      tags:
      - testing
  /change-password:
    post:
      consumes:
      - application/json
      description: Allows a connected user to change their password
      parameters:
      - description: New password payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
        "400":
          description: Bad request (invalid JSON)
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized (not connected or user not found)
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Change password for authenticated user
      tags:
      - auth
  /email:
    post:
      consumes:
      - application/json
      description: Sends a test email to the specified address
      parameters:
      - description: Email request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.MailerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid email address or bad request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Send test email
      tags:
      - mail
  /forget-password:
    post:
      consumes:
      - application/json
      description: Generate a new password and send it via email to the user if the
        account exists
      parameters:
      - description: Email of the user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.MailerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success even if user does not exist (for security)
        "400":
          description: Bad request (invalid JSON or email format)
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Request password reset
      tags:
      - auth
  /hello_world:
    get:
      description: Returns a greeting with the provided name
      parameters:
      - description: Name to greet
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.HelloWorldResponse'
      summary: Say Hello
      tags:
      - testing
  /image:
    get:
      description: Retrieves a pre-signed URL to access an image stored in S3
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ImageUrl'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get image URL from S3
      tags:
      - upload
    post:
      consumes:
      - multipart/form-data
      description: Uploads an image file to an S3 bucket
      parameters:
      - description: Image file to upload
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad request or file not found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Upload an image to S3
      tags:
      - upload
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with username and password
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Login a user
      tags:
      - auth
  /match:
    post:
      consumes:
      - application/json
      description: Enregistre un nouveau match en base de données à partir des données
        fournies en JSON
      parameters:
      - description: Objet match à créer
        in: body
        name: match
        required: true
        schema:
          $ref: '#/definitions/models.MatchRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Match créé avec succès
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Données invalides ou champ ID manquant
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Erreur lors de la création du match
          schema:
            $ref: '#/definitions/models.Error'
      summary: Crée un nouveau match
      tags:
      - match
  /match/{id}:
    get:
      description: Retourne les informations d’un match en fonction de son identifiant
        passé en paramètre de requête
      parameters:
      - description: Identifiant du match
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Match trouvé
          schema:
            $ref: '#/definitions/models.MatchResponse'
        "400":
          description: ID manquant ou invalide
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Match non trouvé
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Erreur serveur ou base de données
          schema:
            $ref: '#/definitions/models.Error'
      summary: Récupère un match par son ID
      tags:
      - match
  /match/all:
    get:
      description: Retourne la liste complète de tous les matchs stockés en base
      produces:
      - application/json
      responses:
        "200":
          description: Liste des matchs
          schema:
            items:
              $ref: '#/definitions/models.MatchResponse'
            type: array
        "500":
          description: Erreur serveur lors de la récupération des matchs
          schema:
            $ref: '#/definitions/models.Error'
      summary: Liste tous les matchs
      tags:
      - match
  /place:
    post:
      description: Appelle l'API Google Places pour synchroniser les terrains autour
        d'une position donnée (Paris en dur pour l'instant)
      produces:
      - application/json
      responses:
        "201":
          description: Synchro réussie
        "500":
          description: Erreur lors de la synchronisation
          schema:
            $ref: '#/definitions/models.Error'
      summary: Synchronise les terrains depuis l'API Google Places
      tags:
      - google
  /profile_picture/{id}:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a profile picture to an S3 bucket
      parameters:
      - description: Image file to upload
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad request or file not found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Upload a profile picture to S3
      tags:
      - upload
  /register:
    post:
      consumes:
      - application/json
      description: Register a user with username and password
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: User already exists
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Register a new user
      tags:
      - auth
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve user information, including profile picture and preferences
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Missing ID in URL params
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Patch a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Missing ID in URL params
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Incorrect rights
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Patch a user by ID
      tags:
      - users
swagger: "2.0"
